<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetOpenAuth.OAuth2</name>
    </assembly>
    <members>
        <member name="T:DotNetOpenAuth.OAuth2.AuthorizationState">
            <summary>
            A simple in-memory copy of an authorization state.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAuthorizationState">
            <summary>
            Provides access to a persistent object that tracks the state of an authorization.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationState.Delete">
            <summary>
            Deletes this authorization, including access token and refresh token where applicable.
            </summary>
            <remarks>
            This method is invoked when an authorization attempt fails, is rejected, is revoked, or
            expires and cannot be renewed.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationState.SaveChanges">
            <summary>
            Saves any changes made to this authorization object's properties.
            </summary>
            <remarks>
            This method is invoked after DotNetOpenAuth changes any property.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.Callback">
            <summary>
            Gets or sets the callback URL used to obtain authorization.
            </summary>
            <value>The callback URL.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.RefreshToken">
            <summary>
            Gets or sets the long-lived token used to renew the short-lived <see cref="P:DotNetOpenAuth.OAuth2.IAuthorizationState.AccessToken"/>.
            </summary>
            <value>The refresh token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.AccessTokenIssueDateUtc">
            <summary>
            Gets or sets the access token issue date UTC.
            </summary>
            <value>The access token issue date UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.AccessTokenExpirationUtc">
            <summary>
            Gets or sets the access token UTC expiration date.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationState.Scope">
            <summary>
            Gets the scope the token is (to be) authorized for.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.AuthorizationState.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.AuthorizationState"/> class.
            </summary>
            <param name="scopes">The scopes of access being requested or that was obtained.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.AuthorizationState.Delete">
            <summary>
            Deletes this authorization, including access token and refresh token where applicable.
            </summary>
            <remarks>
            This method is invoked when an authorization attempt fails, is rejected, is revoked, or
            expires and cannot be renewed.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.AuthorizationState.SaveChanges">
            <summary>
            Saves any changes made to this authorization object's properties.
            </summary>
            <remarks>
            This method is invoked after DotNetOpenAuth changes any property.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.Callback">
            <summary>
            Gets or sets the callback URL used to obtain authorization.
            </summary>
            <value>The callback URL.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.RefreshToken">
            <summary>
            Gets or sets the long-lived token used to renew the short-lived <see cref="P:DotNetOpenAuth.OAuth2.AuthorizationState.AccessToken"/>.
            </summary>
            <value>The refresh token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.AccessTokenExpirationUtc">
            <summary>
            Gets or sets the access token UTC expiration date.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.AccessTokenIssueDateUtc">
            <summary>
            Gets or sets the access token issue date UTC.
            </summary>
            <value>The access token issue date UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.Scope">
            <summary>
            Gets the scope the token is (to be) authorized for.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationState.IsDeleted">
            <summary>
            Gets or sets a value indicating whether this instance is deleted.
            </summary>
            <value>
            	<c>true</c> if this instance is deleted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement">
            <summary>
            Decodes verification codes, refresh tokens and access tokens on incoming messages.
            </summary>
            <remarks>
            This binding element also ensures that the code/token coming in is issued to
            the same client that is sending the code/token and that the authorization has
            not been revoked and that an access token has not expired.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase">
            <summary>
            The base class for any authorization server channel binding element.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.Channel">
            <summary>
            Gets or sets the channel that this binding element belongs to.
            </summary>
            <remarks>
            This property is set by the channel when it is first constructed.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerBindingElementBase.AuthorizationServer">
            <summary>
            Gets the authorization server hosting this channel.
            </summary>
            <value>The authorization server.</value>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AccessRequestBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <value></value>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken">
            <summary>
            A short-lived token that accompanies HTTP requests to protected data to authorize the request.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag">
            <summary>
            A data bag that stores authorization data.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription">
            <summary>
            Describes a delegated authorization between a resource server, a client, and a user.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription.ClientIdentifier">
            <summary>
            Gets the identifier of the client authorized to access protected data.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription.UtcIssued">
            <summary>
            Gets the date this authorization was established or the token was issued.
            </summary>
            <value>A date/time expressed in UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription.User">
            <summary>
            Gets the name on the account whose data on the resource server is accessible using this authorization.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription.Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag"/> class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag.ClientIdentifier">
            <summary>
            Gets or sets the identifier of the client authorized to access protected data.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag.UtcIssued">
            <summary>
            Gets the date this authorization was established or the token was issued.
            </summary>
            <value>A date/time expressed in UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag.User">
            <summary>
            Gets or sets the name on the account whose data on the resource server is accessible using this authorization.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationDataBag.Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.#ctor(DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken"/> class.
            </summary>
            <param name="authorization">The authorization to be described by the access token.</param>
            <param name="lifetime">The lifetime of the access token.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken"/> class.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <param name="scopes">The scopes.</param>
            <param name="username">The username of the account that authorized this token.</param>
            <param name="lifetime">The lifetime for this access token.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.CreateFormatter(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Creates a formatter capable of serializing/deserializing an access token.
            </summary>
            <param name="signingKey">The crypto service provider with the authorization server's private key used to asymmetrically sign the access token.</param>
            <param name="encryptingKey">The crypto service provider with the resource server's public key used to encrypt the access token.</param>
            <returns>An access token serializer.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken.Lifetime">
            <summary>
            Gets or sets the lifetime of the access token.
            </summary>
            <value>The lifetime.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement">
            <summary>
            Serializes access tokens inside an outgoing message.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AccessTokenBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <value>Always <c>MessageProtections.None</c></value>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.GrantTypeEncoder">
            <summary>
            Encodes/decodes the OAuth 2.0 grant_type argument.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.GrantTypeEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.GrantTypeEncoder"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.GrantTypeEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.GrantTypeEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.EndUserAuthorizationResponseTypeEncoder">
            <summary>
            Encodes/decodes the OAuth 2.0 response_type argument.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.EndUserAuthorizationResponseTypeEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.EndUserAuthorizationResponseTypeEncoder"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.EndUserAuthorizationResponseTypeEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.EndUserAuthorizationResponseTypeEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IAccessTokenCarryingRequest">
            <summary>
            A message that carries an access token between client and authorization server.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationCarryingRequest">
            <summary>
            A message that carries some kind of token from the client to the authorization or resource server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationCarryingRequest.AuthorizationDescription">
            <summary>
            Gets the authorization that the code or token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAccessTokenCarryingRequest.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAccessTokenCarryingRequest.AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationCodeCarryingRequest">
            <summary>
            A message that carries an authorization code between client and authorization server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationCodeCarryingRequest.Code">
            <summary>
            Gets or sets the authorization code.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationCodeCarryingRequest.AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the code describes.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IOAuth2ChannelWithAuthorizationServer">
            <summary>
            An interface on an OAuth 2 Authorization Server channel
            to expose the host provided authorization server object.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IOAuth2ChannelWithAuthorizationServer.AuthorizationServer">
            <summary>
            Gets the authorization server.
            </summary>
            <value>The authorization server.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IRefreshTokenCarryingRequest">
            <summary>
            A message that carries a refresh token between client and authorization server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IRefreshTokenCarryingRequest.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IRefreshTokenCarryingRequest.AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase">
            <summary>
            The base messaging channel used by OAuth 2.0 parties.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase.MessageTypes">
            <summary>
            The messages receivable by this channel.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase.Versions">
            <summary>
            The protocol versions supported by this channel.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase.#ctor(DotNetOpenAuth.Messaging.IChannelBindingElement[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase"/> class.
            </summary>
            <param name="channelBindingElements">The channel binding elements.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ChannelBase.FilterReceivedFields(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Allows preprocessing and validation of message data before an appropriate message type is
            selected or deserialized.
            </summary>
            <param name="fields">The received message data.</param>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel">
            <summary>
            The messaging channel used by OAuth 2.0 Clients.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel.CreateHttpRequest(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Prepares an HTTP request that carries a given message.
            </summary>
            <param name="request">The message to send.</param>
            <returns>
            The <see cref="T:System.Net.HttpWebRequest"/> prepared to send the request.
            </returns>
            <remarks>
            This method must be overridden by a derived class, unless the <see cref="M:DotNetOpenAuth.Messaging.Channel.RequestCore(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)"/> method
            is overridden and does not require this method.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>
            The deserialized message parts, if found.  Null otherwise.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel.ReadFromRequestCore(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="request">The request to search for an embedded message.</param>
            <returns>
            The deserialized message, if one is found.  Null otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ClientChannel.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>
            The pending user agent redirect based message to be sent as an HttpResponse.
            </returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.ScopeEncoder">
            <summary>
            Encodes or decodes a set of scopes into the OAuth 2.0 scope message part.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.ScopeEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.ScopeEncoder"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.ScopeEncoder.Encode(System.Object)">
            <summary>
            Encodes the specified value.
            </summary>
            <param name="value">The value.  Guaranteed to never be null.</param>
            <returns>
            The <paramref name="value"/> in string form, ready for message transport.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.ScopeEncoder.Decode(System.String)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The string value carried by the transport.  Guaranteed to never be null, although it may be empty.</param>
            <returns>
            The deserialized form of the given string.
            </returns>
            <exception cref="T:System.FormatException">Thrown when the string value given cannot be decoded into the required object type.</exception>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract"/> class from being created.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#ClientIdentifier">
            <summary>
            Gets the identifier of the client authorized to access protected data.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#UtcIssued">
            <summary>
            Gets the date this authorization was established or the token was issued.
            </summary>
            <value>A date/time expressed in UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#User">
            <summary>
            Gets the name on the account whose data on the resource server is accessible using this authorization, if applicable.
            </summary>
            <value>A username, or <c>null</c> if the authorization is to access the client's own data (not a distinct resource owner's data).</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescriptionContract.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel">
            <summary>
            The channel for the OAuth protocol.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.MessageTypes">
            <summary>
            The messages receivable by this channel.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.Versions">
            <summary>
            The protocol versions supported by this channel.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.ReadFromRequestCore(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="request">The request to search for an embedded message.</param>
            <returns>
            The deserialized message, if one is found.  Null otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>
            The deserialized message parts, if found.  Null otherwise.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream where the fields
            are sent in the response stream in querystring style.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>
            The pending user agent redirect based message to be sent as an HttpResponse.
            </returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2ResourceServerChannel.SearchForBearerAccessTokenInRequest(System.Web.HttpRequestBase)">
            <summary>
            Searches for a bearer access token in the request.
            </summary>
            <param name="request">The request.</param>
            <returns>The bearer access token, if one exists.  Otherwise <c>null</c>.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken">
            <summary>
            The refresh token issued to a client by an authorization server that allows the client
            to periodically obtain new short-lived access tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken.RefreshTokenKeyBucket">
            <summary>
            The name of the bucket for symmetric keys used to sign refresh tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken.#ctor(DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken"/> class.
            </summary>
            <param name="authorization">The authorization this refresh token should describe.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.RefreshToken.CreateFormatter(DotNetOpenAuth.Messaging.Bindings.ICryptoKeyStore)">
            <summary>
            Creates a formatter capable of serializing/deserializing a refresh token.
            </summary>
            <param name="cryptoKeyStore">The crypto key store.</param>
            <returns>
            A DataBag formatter.  Never null.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode">
            <summary>
            Represents the authorization code created when a user approves authorization that
            allows the client to request an access/refresh token.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.AuthorizationCodeKeyBucket">
            <summary>
            The name of the bucket for symmetric keys used to sign authorization codes.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.#ctor(System.String,System.Uri,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode"/> class.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <param name="callback">The callback the client used to obtain authorization, if one was explicitly included in the request.</param>
            <param name="scopes">The authorized scopes.</param>
            <param name="username">The name on the account that authorized access.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.CreateFormatter(DotNetOpenAuth.OAuth2.IAuthorizationServer)">
            <summary>
            Creates a serializer/deserializer for this type.
            </summary>
            <param name="authorizationServer">The authorization server that will be serializing/deserializing this authorization code.  Must not be null.</param>
            <returns>A DataBag formatter.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.VerifyCallback(System.Uri)">
            <summary>
            Verifies the the given callback URL matches the callback originally given in the authorization request.
            </summary>
            <param name="callback">The callback.</param>
            <remarks>
            This method serves to verify that the callback URL given in the original authorization request
            and the callback URL given in the access token request match.
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the callback URLs do not match.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.CalculateCallbackHash(System.Uri)">
            <summary>
            Calculates the hash of the callback URL.
            </summary>
            <param name="callback">The callback whose hash should be calculated.</param>
            <returns>
            A base64 encoding of the hash of the URL.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCode.CallbackHash">
            <summary>
            Gets or sets the hash of the callback URL.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement">
            <summary>
            A binding element for OAuth 2.0 authorization servers that create/verify
            issued authorization codes as part of obtaining access/refresh tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <value>Always <c>MessageProtections.None</c></value>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthorizationCodeBindingElement.MaximumMessageAge">
            <summary>
            Gets the maximum message age from the standard expiration binding element.
            </summary>
            <value>This interval need not account for clock skew because it is only compared within a single authorization server or farm of servers.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement">
            <summary>
            A binding element that should be applied for authorization server channels regardless of which flows
            are supported.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement"/> class.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement.ProcessOutgoingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Prepares a message for sending based on the rules of this channel binding element.
            </summary>
            <param name="message">The message to prepare for sending.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement.ProcessIncomingMessage(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Performs any transformation on an incoming message that may be necessary and/or
            validates an incoming message based on the rules of this channel binding element.
            </summary>
            <param name="message">The incoming message to process.</param>
            <returns>
            The protections (if any) that this binding element applied to the message.
            Null if this binding element did not even apply to this binding element.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">
            Thrown when the binding element rules indicate that this message is invalid and should
            NOT be processed.
            </exception>
            <remarks>
            Implementations that provide message protection must honor the
            <see cref="P:DotNetOpenAuth.Messaging.MessagePartAttribute.RequiredProtection"/> properties where applicable.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.AuthServerAllFlowsBindingElement.Protection">
            <summary>
            Gets the protection commonly offered (if any) by this binding element.
            </summary>
            <remarks>
            This value is used to assist in sorting binding elements in the channel stack.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ClientDescription">
            <summary>
            A default implementation of the <see cref="T:DotNetOpenAuth.OAuth2.IClientDescription"/> interface.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IClientDescription">
            <summary>
            A description of a client from an Authorization Server's point of view.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IClientDescription.IsCallbackAllowed(System.Uri)">
            <summary>
            Determines whether a callback URI included in a client's authorization request 
            is among those allowed callbacks for the registered client.
            </summary>
            <param name="callback">The absolute URI the client has requested the authorization result be received at.</param>
            <returns>
            <c>true</c> if the callback URL is allowable for this client; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>
            At the point this method is invoked, the identity of the client has <em>not</em>
            been confirmed.  To avoid open redirector attacks, the alleged client's identity
            is used to lookup a list of allowable callback URLs to make sure that the callback URL
            the actual client is requesting is one of the expected ones.
            </para>
            <para>
            From OAuth 2.0 section 2.1: 
            The authorization server SHOULD require the client to pre-register
            their redirection URI or at least certain components such as the
            scheme, host, port and path.  If a redirection URI was registered,
            the authorization server MUST compare any redirection URI received at
            the authorization endpoint with the registered URI.
            </para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescription.Secret">
            <summary>
            Gets the client secret.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescription.DefaultCallback">
            <summary>
            Gets the callback to use when an individual authorization request
            does not include an explicit callback URI.
            </summary>
            <value>An absolute URL; or <c>null</c> if none is registered.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescription.ClientType">
            <summary>
            Gets the type of the client.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ClientDescription.isCallbackAllowed">
            <summary>
            A delegate that determines whether the callback is allowed.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ClientDescription.#ctor(System.String,System.Uri,DotNetOpenAuth.OAuth2.ClientType,System.Func{System.Uri,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ClientDescription"/> class.
            </summary>
            <param name="secret">The secret.</param>
            <param name="defaultCallback">The default callback.</param>
            <param name="clientType">Type of the client.</param>
            <param name="isCallbackAllowed">A delegate that determines whether the callback is allowed.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ClientDescription.IsCallbackAllowed(System.Uri)">
            <summary>
            Determines whether a callback URI included in a client's authorization request
            is among those allowed callbacks for the registered client.
            </summary>
            <param name="callback">The absolute URI the client has requested the authorization result be received at.</param>
            <returns>
              <c>true</c> if the callback URL is allowable for this client; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ClientDescription.Secret">
            <summary>
            Gets the client secret.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ClientDescription.DefaultCallback">
            <summary>
            Gets the callback to use when an individual authorization request
            does not include an explicit callback URI.
            </summary>
            <value>
            An absolute URL; or <c>null</c> if none is registered.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ClientDescription.ClientType">
            <summary>
            Gets the type of the client.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ClientType">
            <summary>
            OAuth 2 Client types
            </summary>
            <remarks>
            <para>Based on their ability to
            authenticate securely with the authorization server (i.e. ability to
            maintain the confidentiality of their client credentials).</para>
            <para>The client type designation is based on the authorization server's
            definition of secure authentication and its acceptable exposure
            levels of client credentials.</para>
            <para>The authorization server SHOULD NOT make assumptions about the client
            type, nor accept the type information provided by the client
            developer without first establishing trust.</para>
            <para>A client application consisting of multiple components, each with its
            own client type (e.g. a distributed client with both a confidential
            server-based component and a public browser-based component), MUST
            register each component separately as a different client to ensure
            proper handling by the authorization server.  The authorization
            server MAY provider tools to manage such complex clients through a
            single administration interface.</para>
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ClientType.Confidential">
            <summary>
            Clients capable of maintaining the confidentiality of their
            credentials (e.g. client implemented on a secure server with
            restricted access to the client credentials), or capable of secure
            client authentication using other means.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ClientType.Public">
            <summary>
            Clients incapable of maintaining the confidentiality of their
            credentials (e.g. clients executing on the device used by the
            resource owner such as an installed native application or a web
            browser-based application), and incapable of secure client
            authentication via any other means.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer">
            <summary>
            An interface that resource server hosts should implement if they accept access tokens
            issued by non-DotNetOpenAuth authorization servers.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer.TryValidateAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String,System.String@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token.</param>
            <param name="user">The user whose data is accessible with this access token.</param>
            <param name="scope">The scope of access authorized by this access token.</param>
            <returns>A value indicating whether this access token is valid.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract">
            <summary>
            Code contract for the <see cref="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzer"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAccessTokenAnalyzerContract.DotNetOpenAuth#OAuth2#IAccessTokenAnalyzer#TryValidateAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String,System.String@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token.</param>
            <param name="user">The user whose data is accessible with this access token.</param>
            <param name="scope">The scope of access authorized by this access token.</param>
            <returns>
            A value indicating whether this access token is valid.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAuthorizationServer">
            <summary>
            Provides host-specific authorization server services needed by this library.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServer.GetAccessTokenLifetime(DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest)">
            <summary>
            Obtains the lifetime for a new access token.
            </summary>
            <param name="accessTokenRequestMessage">
            Details regarding the resources that the access token will grant access to, and the identity of the client
            that will receive that access.
            Based on this information the receiving resource server can be determined and the lifetime of the access
            token can be set based on the sensitivity of the resources.
            </param>
            <returns>
            Receives the lifetime for this access token.  Note that within this lifetime, authorization <i>may</i> not be revokable.  
            Short lifetimes are recommended (i.e. one hour), particularly when the client is not authenticated or
            the resources to which access is being granted are sensitive.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServer.GetResourceServerEncryptionKey(DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest)">
            <summary>
            Obtains the encryption key for an access token being created.
            </summary>
            <param name="accessTokenRequestMessage">
            Details regarding the resources that the access token will grant access to, and the identity of the client
            that will receive that access.
            Based on this information the receiving resource server can be determined and the lifetime of the access
            token can be set based on the sensitivity of the resources.
            </param>
            <returns>
            The crypto service provider with the asymmetric public key to use for encrypting access tokens for a specific resource server.
            The caller is responsible to dispose of this value.
            </returns>
            <remarks>
            The caller is responsible to dispose of the returned value.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServer.GetClient(System.String)">
            <summary>
            Gets the client with a given identifier.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <returns>The client registration.  Never null.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no client with the given identifier is registered with this authorization server.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServer.IsAuthorizationValid(DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription)">
            <summary>
            Determines whether a described authorization is (still) valid.
            </summary>
            <param name="authorization">The authorization.</param>
            <returns>
            	<c>true</c> if the original authorization is still valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            <para>When establishing that an authorization is still valid,
            it's very important to only match on recorded authorizations that
            meet these criteria:</para>
             1) The client identifier matches.
             2) The user account matches.
             3) The scope on the recorded authorization must include all scopes in the given authorization.
             4) The date the recorded authorization was issued must be <em>no later</em> that the date the given authorization was issued.
            <para>One possible scenario is where the user authorized a client, later revoked authorization,
            and even later reinstated authorization.  This subsequent recorded authorization 
            would not satisfy requirement #4 in the above list.  This is important because the revocation
            the user went through should invalidate all previously issued tokens as a matter of
            security in the event the user was revoking access in order to sever authorization on a stolen
            account or piece of hardware in which the tokens were stored. </para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServer.IsResourceOwnerCredentialValid(System.String,System.String)">
            <summary>
            Determines whether a given set of resource owner credentials is valid based on the authorization server's user database.
            </summary>
            <param name="userName">Username on the account.</param>
            <param name="password">The user's password.</param>
            <returns>
              <c>true</c> if the given credentials are valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the authorization server does not support the resource owner password credential grant type.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServer.CryptoKeyStore">
            <summary>
            Gets the store for storing crypto keys used to symmetrically encrypt and sign authorization codes and refresh tokens.
            </summary>
            <remarks>
            This store should be kept strictly confidential in the authorization server(s)
            and NOT shared with the resource server.  Anyone with these secrets can mint
            tokens to essentially grant themselves access to anything they want.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServer.VerificationCodeNonceStore">
            <summary>
            Gets the authorization code nonce store to use to ensure that authorization codes can only be used once.
            </summary>
            <value>The authorization code nonce store.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServer.AccessTokenSigningKey">
            <summary>
            Gets the crypto service provider with the asymmetric private key to use for signing access tokens.
            </summary>
            <returns>A crypto service provider instance that contains the private key.</returns>
            <value>Must not be null, and must contain the private key.</value>
            <remarks>
            The public key in the private/public key pair will be used by the resource
            servers to validate that the access token is minted by a trusted authorization server.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IAuthorizationServerContract">
            <summary>
            Code Contract for the <see cref="T:DotNetOpenAuth.OAuth2.IAuthorizationServer"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth2.IAuthorizationServerContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#GetAccessTokenLifetime(DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest)">
            <summary>
            Obtains the lifetime for a new access token.
            </summary>
            <param name="accessTokenRequestMessage">Details regarding the resources that the access token will grant access to, and the identity of the client
            that will receive that access.
            Based on this information the receiving resource server can be determined and the lifetime of the access
            token can be set based on the sensitivity of the resources.</param>
            <returns>
            Receives the lifetime for this access token.  Note that within this lifetime, authorization <i>may</i> not be revokable.
            Short lifetimes are recommended (i.e. one hour), particularly when the client is not authenticated or
            the resources to which access is being granted are sensitive.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#GetResourceServerEncryptionKey(DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest)">
            <summary>
            Obtains the encryption key for an access token being created.
            </summary>
            <param name="accessTokenRequestMessage">Details regarding the resources that the access token will grant access to, and the identity of the client
            that will receive that access.
            Based on this information the receiving resource server can be determined and the lifetime of the access
            token can be set based on the sensitivity of the resources.</param>
            <returns>
            The crypto service provider with the asymmetric public key to use for encrypting access tokens for a specific resource server.
            The caller is responsible to dispose of this value.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#GetClient(System.String)">
            <summary>
            Gets the client with a given identifier.
            </summary>
            <param name="clientIdentifier">The client identifier.</param>
            <returns>The client registration.  Never null.</returns>
            <exception cref="T:System.ArgumentException">Thrown when no client with the given identifier is registered with this authorization server.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#IsAuthorizationValid(DotNetOpenAuth.OAuth2.ChannelElements.IAuthorizationDescription)">
            <summary>
            Determines whether a described authorization is (still) valid.
            </summary>
            <param name="authorization">The authorization.</param>
            <returns>
            	<c>true</c> if the original authorization is still valid; otherwise, <c>false</c>.
            </returns>
            <remarks>
            	<para>When establishing that an authorization is still valid,
            it's very important to only match on recorded authorizations that
            meet these criteria:</para>
            1) The client identifier matches.
            2) The user account matches.
            3) The scope on the recorded authorization must include all scopes in the given authorization.
            4) The date the recorded authorization was issued must be <em>no later</em> that the date the given authorization was issued.
            <para>One possible scenario is where the user authorized a client, later revoked authorization,
            and even later reinstated authorization.  This subsequent recorded authorization
            would not satisfy requirement #4 in the above list.  This is important because the revocation
            the user went through should invalidate all previously issued tokens as a matter of
            security in the event the user was revoking access in order to sever authorization on a stolen
            account or piece of hardware in which the tokens were stored. </para>
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#IsResourceOwnerCredentialValid(System.String,System.String)">
            <summary>
            Determines whether a given set of resource owner credentials is valid based on the authorization server's user database.
            </summary>
            <param name="userName">Username on the account.</param>
            <param name="password">The user's password.</param>
            <returns>
              <c>true</c> if the given credentials are valid; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.NotSupportedException">May be thrown if the authorization server does not support the resource owner password credential grant type.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#CryptoKeyStore">
            <summary>
            Gets the store for storeing crypto keys used to symmetrically encrypt and sign authorization codes and refresh tokens.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#VerificationCodeNonceStore">
            <summary>
            Gets the authorization code nonce store to use to ensure that authorization codes can only be used once.
            </summary>
            <value>The authorization code nonce store.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IAuthorizationServerContract.DotNetOpenAuth#OAuth2#IAuthorizationServer#AccessTokenSigningKey">
            <summary>
            Gets the crypto service provider with the asymmetric private key to use for signing access tokens.
            </summary>
            <value>
            Must not be null, and must contain the private key.
            </value>
            <returns>A crypto service provider instance that contains the private key.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IClientAuthorizationTracker">
            <summary>
            A token manager implemented by some clients to assist in tracking authorization state.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IClientAuthorizationTracker.GetAuthorizationState(System.Uri,System.String)">
            <summary>
            Gets the state of the authorization for a given callback URL and client state.
            </summary>
            <param name="callbackUrl">The callback URL.</param>
            <param name="clientState">State of the client stored at the beginning of an authorization request.</param>
            <returns>The authorization state; may be <c>null</c> if no authorization state matches.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IClientAuthorizationTrackerContract">
            <summary>
            Contract class for the <see cref="T:DotNetOpenAuth.OAuth2.IClientAuthorizationTracker"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IClientAuthorizationTrackerContract.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:DotNetOpenAuth.OAuth2.IClientAuthorizationTrackerContract"/> class from being created.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IClientAuthorizationTrackerContract.DotNetOpenAuth#OAuth2#IClientAuthorizationTracker#GetAuthorizationState(System.Uri,System.String)">
            <summary>
            Gets the state of the authorization for a given callback URL and client state.
            </summary>
            <param name="callbackUrl">The callback URL.</param>
            <param name="clientState">State of the client stored at the beginning of an authorization request.</param>
            <returns>
            The authorization state; may be <c>null</c> if no authorization state matches.
            </returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.IClientDescriptionContract">
            <summary>
            Contract class for the <see cref="T:DotNetOpenAuth.OAuth2.IClientDescription"/> interface.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.IClientDescriptionContract.DotNetOpenAuth#OAuth2#IClientDescription#IsCallbackAllowed(System.Uri)">
            <summary>
            Determines whether a callback URI included in a client's authorization request
            is among those allowed callbacks for the registered client.
            </summary>
            <param name="callback">The requested callback URI.</param>
            <returns>
              <c>true</c> if the callback is allowed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescriptionContract.DotNetOpenAuth#OAuth2#IClientDescription#Secret">
            <summary>
            Gets the client secret.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescriptionContract.DotNetOpenAuth#OAuth2#IClientDescription#ClientType">
            <summary>
            Gets the type of the client.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.IClientDescriptionContract.DotNetOpenAuth#OAuth2#IClientDescription#DefaultCallback">
            <summary>
            Gets the callback to use when an individual authorization request
            does not include an explicit callback URI.
            </summary>
            <value>
            An absolute URL; or <c>null</c> if none is registered.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest">
            <summary>
            A message that accompanies an HTTP request to a resource server that provides authorization.
            </summary>
            <remarks>
            In its current form, this class only accepts bearer access tokens. 
            When support for additional access token types is added, this class should probably be refactored
            into derived types, where each derived type supports a particular access token type.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.MessageBase">
            <summary>
            A common message base class for OAuth messages.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.MessageBase.extraData">
            <summary>
            A dictionary to contain extra message data.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.MessageBase.originatingRequest">
            <summary>
            The originating request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.MessageBase.version">
            <summary>
            The backing field for the <see cref="P:DotNetOpenAuth.Messaging.IMessage.Version"/> property.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.MessageBase.messageTransport">
            <summary>
            A value indicating whether this message is a direct or indirect message.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.MessageBase.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.MessageBase"/> class
            that is used for direct response messages.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.MessageBase.#ctor(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.MessageBase"/> class.
            </summary>
            <param name="request">The originating request.</param>
            <param name="recipient">The recipient of the directed message.  Null if not applicable.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.MessageBase.#ctor(System.Version,DotNetOpenAuth.Messaging.MessageTransport,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.MessageBase"/> class
            that is used for directed messages.
            </summary>
            <param name="version">The version.</param>
            <param name="messageTransport">The message transport.</param>
            <param name="recipient">The recipient.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IMessage#EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.MessageBase.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IMessage#Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.ExtraData">
            <summary>
            Gets the extra, non-standard Protocol parameters included in the message.
            </summary>
            <value></value>
            <remarks>
            Implementations of this interface should ensure that this property never returns null.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IProtocolMessage#RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
            <value><see cref="F:DotNetOpenAuth.Messaging.MessageProtections.None"/></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IProtocolMessage#Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IDirectedProtocolMessage#HttpMethods">
            <summary>
            Gets the preferred method of transport for the message.
            </summary>
            <remarks>
            For indirect messages this will likely be GET+POST, which both can be simulated in the user agent:
            the GET with a simple 301 Redirect, and the POST with an HTML form in the response with javascript
            to automate submission.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IDirectedProtocolMessage#Recipient">
            <summary>
            Gets the URL of the intended receiver of this message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.DotNetOpenAuth#Messaging#IDirectResponseProtocolMessage#OriginatingRequest">
            <summary>
            Gets the originating request message that caused this response to be formed.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.RequiredProtection">
            <summary>
            Gets the level of protection this message requires.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.Transport">
            <summary>
            Gets a value indicating whether this is a direct or indirect message.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.Version">
            <summary>
            Gets the version of the protocol or extension this message is prepared to implement.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.HttpMethods">
            <summary>
            Gets or sets the preferred method of transport for the message.
            </summary>
            <remarks>
            For indirect messages this will likely be GET+POST, which both can be simulated in the user agent:
            the GET with a simple 301 Redirect, and the POST with an HTML form in the response with javascript
            to automate submission.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.OriginatingRequest">
            <summary>
            Gets the originating request message that caused this response to be formed.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.MessageBase.Recipient">
            <summary>
            Gets the URL of the intended receiver of this message.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest"/> class.
            </summary>
            <param name="recipient">The recipient.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAccessTokenCarryingRequest#AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAccessTokenCarryingRequest#AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.TokenType">
            <summary>
            Gets the type of the access token.
            </summary>
            <value>
            Always "bearer".
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessProtectedResourceRequest.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest">
            <summary>
            A request from a Client to an Authorization Server to exchange an authorization code for an access token,
            and (at the authorization server's option) a refresh token.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase">
            <summary>
            A message sent from the client to the authorization server to exchange a previously obtained grant for an access token.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AuthenticatedClientRequestBase">
            <summary>
            A direct message from the client to the authorization server that includes the client's credentials.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AuthenticatedClientRequestBase.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AuthenticatedClientRequestBase"/> class.
            </summary>
            <param name="tokenEndpoint">The Authorization Server's access token endpoint URL.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AuthenticatedClientRequestBase.ClientIdentifier">
            <summary>
            Gets the client identifier previously obtained from the Authorization Server.
            </summary>
            <value>The client identifier.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AuthenticatedClientRequestBase.ClientSecret">
            <summary>
            Gets the client secret.
            </summary>
            <value>The client secret.</value>
            <remarks>
            REQUIRED. The client secret as described in Section 2.1  (Client Credentials). OPTIONAL if no client secret was issued. 
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest">
            <summary>
            A request from a client that should be responded to directly with an access token.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest.ClientAuthenticated">
            <summary>
            Gets a value indicating whether the client requesting the access token has authenticated itself.
            </summary>
            <value>
              <c>false</c> for implicit grant requests; otherwise, <c>true</c>.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest.ClientIdentifier">
            <summary>
            Gets the identifier of the client authorized to access protected data.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.IAccessTokenRequest.Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase"/> class.
            </summary>
            <param name="tokenEndpoint">The Authorization Server's access token endpoint URL.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <remarks>
            	<para>Some messages have required fields, or combinations of fields that must relate to each other
            in specialized ways.  After deserializing a message, this method checks the state of the
            message to see if it conforms to the protocol.</para>
            	<para>Note that this property should <i>not</i> check signatures or perform any state checks
            outside this scope of this particular message.</para>
            </remarks>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.DotNetOpenAuth#OAuth2#Messages#IAccessTokenRequest#Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.DotNetOpenAuth#OAuth2#Messages#IAccessTokenRequest#ClientAuthenticated">
            <summary>
            Gets a value indicating whether the client requesting the access token has authenticated itself.
            </summary>
            <value>
            Always true, because of our base class.
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.GrantType">
            <summary>
            Gets the type of the grant.
            </summary>
            <value>The type of the grant.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase.RequestedScope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest"/> class.
            </summary>
            <param name="tokenEndpoint">The Authorization Server's access token endpoint URL.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.#ctor(DotNetOpenAuth.OAuth2.AuthorizationServerDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest"/> class.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCodeCarryingRequest#Code">
            <summary>
            Gets or sets the verification code or refresh/access token.
            </summary>
            <value>The code or token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCodeCarryingRequest#AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the code describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.GrantType">
            <summary>
            Gets the type of the grant.
            </summary>
            <value>The type of the grant.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.AuthorizationCode">
            <summary>
            Gets or sets the verification code previously communicated to the Client
            in <see cref="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.AuthorizationCode"/>.
            </summary>
            <value>The verification code received from the authorization server.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.Callback">
            <summary>
            Gets or sets the callback URL used in <see cref="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.Callback"/>
            </summary>
            <value>
            The Callback URL used to obtain the Verification Code.
            </value>
            <remarks>
            REQUIRED, if the redirect_uri parameter was included in the authorization request as described in Section 4.1.1, and their values MUST be identical.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenAuthorizationCodeRequest.RequestedScope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest">
            <summary>
            A request from a Client to an Authorization Server to exchange the user's username and password for an access token.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.ScopedAccessTokenRequest">
            <summary>
            An access token request that includes a scope parameter.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.ScopedAccessTokenRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.ScopedAccessTokenRequest"/> class.
            </summary>
            <param name="tokenEndpoint">The Authorization Server's access token endpoint URL.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.ScopedAccessTokenRequest.Scope">
            <summary>
            Gets the set of scopes the Client would like the access token to provide access to.
            </summary>
            <value>A set of scopes.  Never null.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.ScopedAccessTokenRequest.RequestedScope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest"/> class.
            </summary>
            <param name="accessTokenEndpoint">The access token endpoint.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the code or token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#UtcIssued">
            <summary>
            Gets the date this authorization was established or the token was issued.
            </summary>
            <value>A date/time expressed in UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#User">
            <summary>
            Gets the name on the account whose data on the resource server is accessible using this authorization.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.GrantType">
            <summary>
            Gets the type of the grant.
            </summary>
            <value>The type of the grant.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.UserName">
            <summary>
            Gets or sets the user's account username.
            </summary>
            <value>The username on the user's account.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.Password">
            <summary>
            Gets or sets the user's password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenResourceOwnerPasswordCredentialsRequest.CredentialsValidated">
            <summary>
            Gets or sets a value indicating whether the resource owner's credentials have been validated at the authorization server.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest">
            <summary>
            A request for an access token for a client application that has its
            own (non-user affiliated) client name and password.
            </summary>
            <remarks>
            This is somewhat analogous to 2-legged OAuth.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest"/> class.
            </summary>
            <param name="tokenEndpoint">The authorization server.</param>
            <param name="version">The version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the code or token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#UtcIssued">
            <summary>
            Gets the date this authorization was established or the token was issued.
            </summary>
            <value>A date/time expressed in UTC.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#User">
            <summary>
            Gets the name on the account whose data on the resource server is accessible using this authorization.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationDescription#Scope">
            <summary>
            Gets the scope of operations the client is allowed to invoke.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.GrantType">
            <summary>
            Gets the type of the grant.
            </summary>
            <value>The type of the grant.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenClientCredentialsRequest.CredentialsValidated">
            <summary>
            Gets or sets a value indicating whether the resource owner's credentials have been validated at the authorization server.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest">
            <summary>
            A message sent by a web application Client to the AuthorizationServer
            via the user agent to obtain authorization from the user and prepare
            to issue an access token to the client if permission is granted.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest">
            <summary>
            A message sent by a web application Client to the AuthorizationServer
            via the user agent to obtain authorization from the user and prepare
            to issue an access token to the client if permission is granted.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.ResponseTypeConst">
            <summary>
            Gets the grant type that the client expects of the authorization server.
            </summary>
            <value>Always <see cref="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationResponseType.AuthorizationCode"/>.  Other response types are not supported.</value>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest"/> class.
            </summary>
            <param name="authorizationEndpoint">The Authorization Server's user authorization URL to direct the user to.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.#ctor(DotNetOpenAuth.OAuth2.AuthorizationServerDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest"/> class.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.ResponseType">
            <summary>
            Gets the grant type that the client expects of the authorization server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.ClientIdentifier">
            <summary>
            Gets or sets the identifier by which this client is known to the Authorization Server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.Callback">
            <summary>
            Gets or sets the callback URL.
            </summary>
            <value>
            An absolute URL to which the Authorization Server will redirect the User back after
            the user has approved the authorization request.
            </value>
            <remarks>
            REQUIRED unless a redirection URI has been established between the client and authorization server via other means. An absolute URI to which the authorization server will redirect the user-agent to when the end-user authorization step is completed. The authorization server MAY require the client to pre-register their redirection URI. The redirection URI MUST NOT include a query component as defined by [RFC3986]  (Berners-Lee, T., Fielding, R., and L. Masinter, “Uniform Resource Identifier (URI): Generic Syntax,” January 2005.) section 3 if the state parameter is present. 
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.ClientState">
            <summary>
            Gets or sets state of the client that should be sent back with the authorization response.
            </summary>
            <value>
            An opaque value that Clients can use to maintain state associated with this request. 
            </value>
            <remarks>
            This data is proprietary to the client and should be considered an opaque string to the
            authorization server.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest.Scope">
            <summary>
            Gets the scope of access being requested.
            </summary>
            <value>The scope of the access request expressed as a list of space-delimited strings. The value of the scope parameter is defined by the authorization server. If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope.</value>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest.ResponseTypeConst">
            <summary>
            Gets or sets the grant type that the client expects of the authorization server.
            </summary>
            <value>Always <see cref="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationResponseType.AccessToken"/>.  Other response types are not supported.</value>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest"/> class.
            </summary>
            <param name="authorizationEndpoint">The Authorization Server's user authorization URL to direct the user to.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest.#ctor(DotNetOpenAuth.OAuth2.AuthorizationServerDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest"/> class.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest.ResponseType">
            <summary>
            Gets the grant type that the client expects of the authorization server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationImplicitRequest.DotNetOpenAuth#OAuth2#Messages#IAccessTokenRequest#ClientAuthenticated">
            <summary>
            Gets a value indicating whether the client requesting the access token has authenticated itself.
            </summary>
            <value>
            Always false because authorization requests only include the client_id, without a secret.
            </value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse">
            <summary>
            The message sent by the Authorization Server to the Client via the user agent
            to indicate that user authorization was granted, carrying only an access token,
            and to return the user to the Client where they started their experience.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase">
            <summary>
            The message sent by the Authorization Server to the Client via the user agent
            to indicate that user authorization was granted, and to return the user
            to the Client where they started their experience.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.IMessageWithClientState">
            <summary>
            A message carrying client state the authorization server should preserve on behalf of the client
            during an authorization.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.IMessageWithClientState.ClientState">
            <summary>
            Gets or sets the state of the client.
            </summary>
            <value>The state of the client.</value>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase.#ctor(System.Uri,DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="request">The authorization request from the user agent on behalf of the client.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase.DotNetOpenAuth#OAuth2#Messages#IMessageWithClientState#ClientState">
            <summary>
            Gets or sets some state as provided by the client in the authorization request.
            </summary>
            <value>An opaque value defined by the client.</value>
            <remarks>
            REQUIRED if the Client sent the value in the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest"/>.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase.Scope">
            <summary>
            Gets or sets the scope of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.AccessToken"/> if one is given; otherwise the scope of the authorization code.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessResponseBase.AuthorizingUsername">
            <summary>
            Gets or sets the authorizing user's account name.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.#ctor(System.Uri,DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="request">The authorization request from the user agent on behalf of the client.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.DotNetOpenAuth#OAuth2#ChannelElements#IAccessTokenCarryingRequest#AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.DotNetOpenAuth#Messaging#IHttpIndirectResponse#Include301RedirectPayloadInFragment">
            <summary>
            Gets a value indicating whether the payload for the message should be included
            in the redirect fragment instead of the query string or POST entity.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.TokenType">
            <summary>
            Gets or sets the token type.
            </summary>
            <value>Usually "bearer".</value>
            <remarks>
            Described in OAuth 2.0 section 7.1.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.Scope">
            <summary>
            Gets or sets the scope of the <see cref="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.AccessToken"/> if one is given; otherwise the scope of the authorization code.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAccessTokenResponse.Lifetime">
            <summary>
            Gets or sets the lifetime of the authorization.
            </summary>
            <value>The lifetime.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse">
            <summary>
            The message that an Authorization Server responds to a Client with when the user denies a user authorization request.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.#ctor(System.Uri,DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="request">The authorization request from the user agent on behalf of the client.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>
            One of the values given in <see cref="T:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes"/>.
            OR a numerical HTTP status code from the 4xx or 5xx
            range, with the exception of the 400 (Bad Request) and
            401 (Unauthorized) status codes.  For example, if the
            service is temporarily unavailable, the authorization
            server MAY return an error response with "error" set to
            "503".
            </value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.ErrorDescription">
            <summary>
            Gets or sets a human readable description of the error.
            </summary>
            <value>Human-readable text providing additional information, used to assist in the understanding and resolution of the error that occurred.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.ErrorUri">
            <summary>
            Gets or sets the location of the web page that describes the error and possible resolution.
            </summary>
            <value>A URI identifying a human-readable web page with information about the error, used to provide the end-user with additional information about the error.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationFailedResponse.DotNetOpenAuth#OAuth2#Messages#IMessageWithClientState#ClientState">
            <summary>
            Gets or sets some state as provided by the client in the authorization request.
            </summary>
            <value>An opaque value defined by the client.</value>
            <remarks>
            REQUIRED if the Client sent the value in the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest"/>.
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse">
            <summary>
            The message sent by the Authorization Server to the Client via the user agent
            to indicate that user authorization was granted, carrying an authorization code and possibly an access token,
            and to return the user to the Client where they started their experience.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.#ctor(System.Uri,DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse"/> class.
            </summary>
            <param name="clientCallback">The URL to redirect to so the client receives the message. This may not be built into the request message if the client pre-registered the URL with the authorization server.</param>
            <param name="request">The authorization request from the user agent on behalf of the client.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCodeCarryingRequest#Code">
            <summary>
            Gets or sets the authorization code.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCodeCarryingRequest#AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the code describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationSuccessAuthCodeResponse.AuthorizationCode">
            <summary>
            Gets or sets the authorization code.
            </summary>
            <value>The authorization code.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.GrantType">
            <summary>
            The types of authorizations that a client can use to obtain
            a refresh token and/or an access token.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.GrantType.AuthorizationCode">
            <summary>
            The client is providing the authorization code previously obtained from an end user authorization response.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.GrantType.Password">
            <summary>
            The client is providing the end user's username and password to the authorization server.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.GrantType.Assertion">
            <summary>
            The client is providing an assertion it obtained from another source.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.GrantType.RefreshToken">
            <summary>
            The client is providing a refresh token.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.GrantType.ClientCredentials">
            <summary>
            No authorization to access a user's data has been given.  The client is requesting
            an access token authorized for its own private data.  This fits the classic OAuth 1.0(a) "2-legged OAuth" scenario.
            </summary>
            <remarks>
            When requesting an access token using the none access grant type (no access grant is included), the client is requesting access to the protected resources under its control, or those of another resource owner which has been previously arranged with the authorization server (the method of which is beyond the scope of this specification).
            </remarks>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest">
            <summary>
            A request from the client to the token endpoint for a new access token
            in exchange for a refresh token that the client has previously obtained.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.#ctor(System.Uri,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest"/> class.
            </summary>
            <param name="tokenEndpoint">The token endpoint.</param>
            <param name="version">The version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.#ctor(DotNetOpenAuth.OAuth2.AuthorizationServerDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest"/> class.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.DotNetOpenAuth#OAuth2#ChannelElements#IRefreshTokenCarryingRequest#RefreshToken">
            <summary>
            Gets or sets the verification code or refresh/access token.
            </summary>
            <value>The code or token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.DotNetOpenAuth#OAuth2#ChannelElements#IRefreshTokenCarryingRequest#AuthorizationDescription">
            <summary>
            Gets or sets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.DotNetOpenAuth#OAuth2#ChannelElements#IAuthorizationCarryingRequest#AuthorizationDescription">
            <summary>
            Gets the authorization that the token describes.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>The refresh token.</value>
            <remarks>
            REQUIRED. The refresh token associated with the access token to be refreshed. 
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenRefreshRequest.GrantType">
            <summary>
            Gets the type of the grant.
            </summary>
            <value>The type of the grant.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationResponseType">
            <summary>
            An indication of what kind of response the client is requesting from the authorization server
            after the user has granted authorized access.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationResponseType.AccessToken">
            <summary>
            An access token should be returned immediately.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.EndUserAuthorizationResponseType.AuthorizationCode">
            <summary>
            An authorization code should be returned, which can later be exchanged for refresh and access tokens.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse">
            <summary>
            A direct response that is simply a 401 Unauthorized with an 
            WWW-Authenticate: OAuth header.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.#ctor(DotNetOpenAuth.Messaging.ProtocolException,System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse"/> class.
            </summary>
            <param name="exception">The exception.</param>
            <param name="version">The protocol version.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.#ctor(DotNetOpenAuth.Messaging.IDirectedProtocolMessage)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.#ctor(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,DotNetOpenAuth.Messaging.ProtocolException)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#HttpStatusCode">
            <summary>
            Gets the HTTP status code that the direct response should be sent with.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#Headers">
            <summary>
            Gets the HTTP headers to add to the response.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.ErrorMessage">
            <summary>
            Gets or sets the error message.
            </summary>
            <value>The error message.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.Realm">
            <summary>
            Gets or sets the realm.
            </summary>
            <value>The realm.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.Scope">
            <summary>
            Gets or sets the scope.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.Algorithms">
            <summary>
            Gets or sets the algorithms.
            </summary>
            <value>The algorithms.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.UserEndpoint">
            <summary>
            Gets or sets the user endpoint.
            </summary>
            <value>The user endpoint.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.UnauthorizedResponse.TokenEndpoint">
            <summary>
            Gets or sets the token endpoint.
            </summary>
            <value>The token endpoint.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse">
            <summary>
            A response from the Authorization Server to the Client to indicate that a
            request for an access token renewal failed, probably due to an invalid
            refresh token.
            </summary>
            <remarks>
            This message type is shared by the Web App, Rich App, and Username/Password profiles.
            </remarks>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.invalidClientCredentialsInAuthorizationHeader">
            <summary>
            A value indicating whether this error response is in result to a request that had invalid client credentials which were supplied in the HTTP Authorization header.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.#ctor(DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse"/> class.
            </summary>
            <param name="request">The faulty request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.#ctor(DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse"/> class.
            </summary>
            <param name="request">The faulty request.</param>
            <param name="invalidClientCredentialsInAuthorizationHeader">A value indicating whether this error response is in result to a request that had invalid client credentials which were supplied in the HTTP Authorization header.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse"/> class.
            </summary>
            <param name="version">The protocol version.</param>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#HttpStatusCode">
            <summary>
            Gets the HTTP status code that the direct response should be sent with.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#Headers">
            <summary>
            Gets the HTTP headers to add to the response.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>One of the values given in <see cref="T:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes"/>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.ErrorDescription">
            <summary>
            Gets or sets a human readable description of the error.
            </summary>
            <value>Human-readable text providing additional information, used to assist in the understanding and resolution of the error that occurred.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenFailedResponse.ErrorUri">
            <summary>
            Gets or sets the location of the web page that describes the error and possible resolution.
            </summary>
            <value>A URI identifying a human-readable web page with information about the error, used to provide the end-user with additional information about the error.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse">
            <summary>
            A response from the Authorization Server to the Client containing a delegation code
            that the Client should use to obtain an access token.
            </summary>
            <remarks>
            This message type is shared by the Web App, Rich App, and Username/Password profiles.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.#ctor(DotNetOpenAuth.OAuth2.Messages.AccessTokenRequestBase)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.EnsureValidMessage">
            <summary>
            Checks the message state for conformity to the protocol specification
            and throws an exception if the message is invalid.
            </summary>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown if the message is invalid.</exception>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#HttpStatusCode">
            <summary>
            Gets the HTTP status code that the direct response should be sent with.
            </summary>
            <value>Always HttpStatusCode.OK</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.DotNetOpenAuth#Messaging#IHttpDirectResponse#Headers">
            <summary>
            Gets the HTTP headers to add to the response.
            </summary>
            <value>May be an empty collection, but must not be <c>null</c>.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.AccessToken">
            <summary>
            Gets or sets the access token.
            </summary>
            <value>The access token.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.TokenType">
            <summary>
            Gets or sets the token type.
            </summary>
            <value>Usually "bearer".</value>
            <remarks>
            Described in OAuth 2.0 section 7.1.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.Lifetime">
            <summary>
            Gets or sets the lifetime of the access token.
            </summary>
            <value>The lifetime.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.RefreshToken">
            <summary>
            Gets or sets the refresh token.
            </summary>
            <value>The refresh token.</value>
            <remarks>
            OPTIONAL. The refresh token used to obtain new access tokens using the same end-user access grant as described in Section 6  (Refreshing an Access Token). 
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.Scope">
            <summary>
            Gets the scope of access being requested.
            </summary>
            <value>The scope of the access request expressed as a list of space-delimited strings. The value of the scope parameter is defined by the authorization server. If the value contains multiple space-delimited strings, their order does not matter, and each string adds an additional access range to the requested scope.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Messages.AccessTokenSuccessResponse.HasRefreshToken">
            <summary>
            Gets or sets a value indicating whether a refresh token is or should be included in the response.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer">
            <summary>
            An access token reader that understands DotNetOpenAuth authorization server issued tokens.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.#ctor(System.Security.Cryptography.RSACryptoServiceProvider,System.Security.Cryptography.RSACryptoServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer"/> class.
            </summary>
            <param name="authorizationServerPublicSigningKey">The crypto service provider with the authorization server public signing key.</param>
            <param name="resourceServerPrivateEncryptionKey">The crypto service provider with the resource server private encryption key.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.TryValidateAccessToken(DotNetOpenAuth.Messaging.IDirectedProtocolMessage,System.String,System.String@,System.Collections.Generic.HashSet{System.String}@)">
            <summary>
            Reads an access token to find out what data it authorizes access to.
            </summary>
            <param name="message">The message carrying the access token.</param>
            <param name="accessToken">The access token.</param>
            <param name="user">The user whose data is accessible with this access token.</param>
            <param name="scope">The scope of access authorized by this access token.</param>
            <returns>
            A value indicating whether this access token is valid.
            </returns>
            <remarks>
            This method also responsible to throw a <see cref="T:DotNetOpenAuth.Messaging.ProtocolException"/> or return
            <c>false</c> when the access token is expired, invalid, or from an untrusted authorization server.
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.AuthorizationServerPublicSigningKey">
            <summary>
            Gets the authorization server public signing key.
            </summary>
            <value>The authorization server public signing key.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.StandardAccessTokenAnalyzer.ResourceServerPrivateEncryptionKey">
            <summary>
            Gets the resource server private encryption key.
            </summary>
            <value>The resource server private encryption key.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.OAuthUtilities">
            <summary>
            Some common utility methods for OAuth 2.0.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.OAuthUtilities.ScopeStringComparer">
            <summary>
            The <see cref="T:System.StringComparer"/> instance to use when comparing scope equivalence.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.OAuthUtilities.scopeDelimiter">
            <summary>
            The delimiter between scope elements.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.OAuthUtilities.accessTokenAuthorizationHeaderAllowedCharacters">
            <summary>
            The characters that may appear in an access token that is included in an HTTP Authorization header.
            </summary>
            <remarks>
            This is defined in OAuth 2.0 DRAFT 10, section 5.1.1. (http://tools.ietf.org/id/draft-ietf-oauth-v2-10.html#authz-header)
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.IsScopeSubset(System.String,System.String)">
            <summary>
            Determines whether one given scope is a subset of another scope.
            </summary>
            <param name="requestedScope">The requested scope, which may be a subset of <paramref name="grantedScope"/>.</param>
            <param name="grantedScope">The granted scope, the suspected superset.</param>
            <returns>
            	<c>true</c> if all the elements that appear in <paramref name="requestedScope"/> also appear in <paramref name="grantedScope"/>;
            <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.SplitScopes(System.String)">
            <summary>
            Identifies individual scope elements
            </summary>
            <param name="scope">The space-delimited list of scopes.</param>
            <returns>A set of individual scopes, with any duplicates removed.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.JoinScopes(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Serializes a set of scopes as a space-delimited list.
            </summary>
            <param name="scopes">The scopes to serialize.</param>
            <returns>A space-delimited list.</returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.VerifyValidScopeTokens(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Verifies that a sequence of scope tokens are all valid.
            </summary>
            <param name="scopes">The scopes.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.VerifyValidScopeToken(System.String)">
            <summary>
            Verifies that a given scope token (not a space-delimited set, but a single token) is valid.
            </summary>
            <param name="scopeToken">The scope token.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.AuthorizeWithBearerToken(System.Net.HttpWebRequest,System.String)">
            <summary>
            Authorizes an HTTP request using an OAuth 2.0 access token in an HTTP Authorization header.
            </summary>
            <param name="request">The request to authorize.</param>
            <param name="accessToken">The access token previously obtained from the Authorization Server.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.OAuthUtilities.GetClientOrThrow(DotNetOpenAuth.OAuth2.IAuthorizationServer,System.String)">
            <summary>
            Gets information about the client with a given identifier.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
            <param name="clientIdentifier">The client identifier.</param>
            <returns>The client information.  Never null.</returns>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel">
            <summary>
            The channel for the OAuth protocol.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.#ctor(DotNetOpenAuth.OAuth2.IAuthorizationServer)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel"/> class.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.ReadFromResponseCore(DotNetOpenAuth.Messaging.IncomingWebResponse)">
            <summary>
            Gets the protocol message that may be in the given HTTP response.
            </summary>
            <param name="response">The response that is anticipated to contain an protocol message.</param>
            <returns>
            The deserialized message parts, if found.  Null otherwise.
            </returns>
            <exception cref="T:DotNetOpenAuth.Messaging.ProtocolException">Thrown when the response is not valid.</exception>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.PrepareDirectResponse(DotNetOpenAuth.Messaging.IProtocolMessage)">
            <summary>
            Queues a message for sending in the response stream.
            </summary>
            <param name="response">The message to send as a response.</param>
            <returns>
            The pending user agent redirect based message to be sent as an HttpResponse.
            </returns>
            <remarks>
            This method implements spec OAuth V1.0 section 5.3.
            </remarks>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.ReadFromRequestCore(System.Web.HttpRequestBase)">
            <summary>
            Gets the protocol message that may be embedded in the given HTTP request.
            </summary>
            <param name="request">The request to search for an embedded message.</param>
            <returns>
            The deserialized message, if one is found.  Null otherwise.
            </returns>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.InitializeBindingElements(DotNetOpenAuth.OAuth2.IAuthorizationServer)">
            <summary>
            Initializes the binding elements for the OAuth channel.
            </summary>
            <param name="authorizationServer">The authorization server.</param>
            <returns>
            An array of binding elements used to initialize the channel.
            </returns>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.ChannelElements.OAuth2AuthorizationServerChannel.AuthorizationServer">
            <summary>
            Gets the authorization server.
            </summary>
            <value>The authorization server.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.ProtocolVersion">
            <summary>
            An enumeration of the OAuth protocol versions supported by this library.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.ProtocolVersion.V20">
            <summary>
            The OAuth 2.0 specification.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Protocol">
            <summary>
            Protocol constants for OAuth 2.0.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.BearerHttpAuthorizationScheme">
            <summary>
            The HTTP authorization scheme "Bearer";
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.BearerHttpAuthorizationSchemeWithTrailingSpace">
            <summary>
            The HTTP authorization scheme "Bearer ";
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.BearerHttpAuthorizationHeaderFormat">
            <summary>
            The format of the HTTP Authorization header value that authorizes OAuth 2.0 requests using bearer access tokens.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.BearerTokenEncodedUrlParameterName">
            <summary>
            The name of the parameter whose value is an OAuth 2.0 bearer access token, as it is defined
            in a URL-encoded POST entity or URL query string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.type">
            <summary>
            The "type" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.state">
            <summary>
            The "state" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.redirect_uri_mismatch">
            <summary>
            The "redirect_uri_mismatch" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.bad_verification_code">
            <summary>
            The "bad_verification_code" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.incorrect_client_credentials">
            <summary>
            The "incorrect_client_credentials" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.unauthorized_client">
            <summary>
            The "unauthorized_client" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.authorization_expired">
            <summary>
            The "authorization_expired" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.redirect_uri">
            <summary>
            The "redirect_uri" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.client_id">
            <summary>
            The "client_id" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.scope">
            <summary>
            The "scope" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.immediate">
            <summary>
            The "immediate" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.client_secret">
            <summary>
            The "client_secret" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.code">
            <summary>
            The "code" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.user_code">
            <summary>
            The "user_code" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.verification_uri">
            <summary>
            The "verification_uri" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.interval">
            <summary>
            The "interval" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.error">
            <summary>
            The "error" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.access_token">
            <summary>
            The "access_token" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.access_token_secret">
            <summary>
            The "access_token_secret" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.token_type">
            <summary>
            The "token_type" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.refresh_token">
            <summary>
            The "refresh_token" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.expires_in">
            <summary>
            The "expires_in" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.expired_delegation_code">
            <summary>
            The "expired_delegation_code" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.username">
            <summary>
            The "username" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.password">
            <summary>
            The "password" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.format">
            <summary>
            The "format" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.assertion">
            <summary>
            The "assertion" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.assertion_type">
            <summary>
            The "assertion_type" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.user_denied">
            <summary>
            The "user_denied" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.error_uri">
            <summary>
            The "error_uri" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.error_description">
            <summary>
            The "error_description" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.response_type">
            <summary>
            The "response_type" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.grant_type">
            <summary>
            The "grant_type" string.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.V20">
            <summary>
            Gets the <see cref="T:DotNetOpenAuth.OAuth2.Protocol"/> instance with values initialized for V1.0 of the protocol.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AllVersions">
            <summary>
            A list of all supported OAuth versions, in order starting from newest version.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.Default">
            <summary>
            The default (or most recent) supported version of the OpenID protocol.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.Protocol.Lookup(DotNetOpenAuth.OAuth2.ProtocolVersion)">
            <summary>
            Gets the OAuth Protocol instance to use for the given version.
            </summary>
            <param name="version">The OAuth version to get.</param>
            <returns>A matching <see cref="T:DotNetOpenAuth.OAuth2.Protocol"/> instance.</returns>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Protocol.Version">
            <summary>
            Gets or sets the OAuth 2.0 version represented by this instance.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.Protocol.ProtocolVersion">
            <summary>
            Gets or sets the OAuth 2.0 version represented by this instance.
            </summary>
            <value>The protocol version.</value>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Protocol.ResponseTypes">
            <summary>
            Values for the "response_type" parameter.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.ResponseTypes.Code">
            <summary>
            The string "code".
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.ResponseTypes.Token">
            <summary>
            The string "token".
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes">
            <summary>
            Error codes that an authorization server can return to a client in response to a malformed or unsupported access token request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes.InvalidRequest">
            <summary>
            The request is missing a required parameter, includes an unknown parameter or parameter value, repeats a parameter, includes multiple credentials, utilizes more than one mechanism for authenticating the client, or is otherwise malformed.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes.UnauthorizedClient">
            <summary>
            The client is not authorized to use the access grant type provided.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes.AccessDenied">
            <summary>
            The resource owner or authorization server denied the request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes.UnsupportedGrantType">
            <summary>
            The authorization server does not support obtaining an access token using this method.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenRequestErrorCodes.InvalidScope">
            <summary>
            The requested scope is invalid, unknown, malformed, or exceeds the previously granted scope.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes">
            <summary>
            Error codes that an authorization server can return to a client in response to a malformed or unsupported end user authorization request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.InvalidRequest">
            <summary>
            The request is missing a required parameter, includes an unknown parameter or parameter value, or is otherwise malformed.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.UnauthorizedClient">
            <summary>
            The client is not authorized to use the requested response type.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.AccessDenied">
            <summary>
            The end-user or authorization server denied the request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.UnsupportedResponseType">
            <summary>
            The requested response type is not supported by the authorization server.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.InvalidScope">
            <summary>
            The requested scope is invalid, unknown, or malformed.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.ServerError">
            <summary>
            The authorization server encountered an unexpected condition which prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.EndUserAuthorizationRequestErrorCodes.TemporarilyUnavailable">
            <summary>
            The authorization server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.Protocol.AccessTokenTypes">
            <summary>
            Recognized access token types.
            </summary>
        </member>
        <member name="F:DotNetOpenAuth.OAuth2.Protocol.AccessTokenTypes.Bearer">
            <summary>
            The "bearer" token type.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.OAuthStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.AbsoluteUriRequired">
            <summary>
              Looks up a localized string similar to The value for message part &quot;{0}&quot; must be an absolute URI..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.AccessScopeExceedsGrantScope">
            <summary>
              Looks up a localized string similar to The requested access scope (&quot;{0}&quot;) exceeds the grant scope (&quot;{1}&quot;)..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.AccessTokenInvalidForHttpAuthorizationHeader">
            <summary>
              Looks up a localized string similar to The access token contains characters that must not appear in the HTTP Authorization header..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.CannotObtainAccessTokenWithReason">
            <summary>
              Looks up a localized string similar to Failed to obtain access token.  Authorization Server reports reason: {0}.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.ClientCallbackDisallowed">
            <summary>
              Looks up a localized string similar to The callback URL ({0}) is not allowed for this client..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.ClientOrTokenSecretNotFound">
            <summary>
              Looks up a localized string similar to Failure looking up secret for client or token..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.HttpsRequired">
            <summary>
              Looks up a localized string similar to This message can only be sent over HTTPS..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.InvalidClientCredentials">
            <summary>
              Looks up a localized string similar to Failed to obtain access token due to invalid Client Identifier or Client Secret..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.InvalidScopeToken">
            <summary>
              Looks up a localized string similar to The scope token &quot;{0}&quot; contains illegal characters or is empty..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.NoCallback">
            <summary>
              Looks up a localized string similar to No callback URI was available for this request..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.NoGrantNoRefreshToken">
            <summary>
              Looks up a localized string similar to Refresh tokens should not be granted without the request including an access grant..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.RefreshTokenInappropriateForRequestType">
            <summary>
              Looks up a localized string similar to The request message type {0} should not be responded to with a refresh token..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.ResultShouldNotBeNull">
            <summary>
              Looks up a localized string similar to The return value of {0}.{1} should never be null..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.ScopesMayNotContainSpaces">
            <summary>
              Looks up a localized string similar to Individual scopes may not contain spaces..
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.OAuthStrings.UnexpectedResponseContentType">
            <summary>
              Looks up a localized string similar to Unexpected response Content-Type {0}.
            </summary>
        </member>
        <member name="T:DotNetOpenAuth.OAuth2.AuthorizationServerDescription">
            <summary>
            A description of an OAuth Authorization Server as seen by an OAuth Client.
            </summary>
        </member>
        <member name="M:DotNetOpenAuth.OAuth2.AuthorizationServerDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetOpenAuth.OAuth2.AuthorizationServerDescription"/> class.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationServerDescription.TokenEndpoint">
            <summary>
            Gets or sets the Authorization Server URL from which an Access Token is requested by the Client.
            </summary>
            <value>An HTTPS URL.</value>
            <remarks>
            <para>After obtaining authorization from the resource owner, clients request an access token from the authorization server's token endpoint.</para>
            <para>The URI of the token endpoint can be found in the service documentation, or can be obtained by the client by making an unauthorized protected resource request (from the WWW-Authenticate response header token-uri (The 'authorization-uri' Attribute) attribute).</para>
            <para>The token endpoint advertised by the resource server MAY include a query component as defined by [RFC3986] (Berners-Lee, T., Fielding, R., and L. Masinter, “Uniform Resource Identifier (URI): Generic Syntax,” January 2005.) section 3.</para>
            <para>Since requests to the token endpoint result in the transmission of plain text credentials in the HTTP request and response, the authorization server MUST require the use of a transport-layer mechanism such as TLS/SSL (or a secure channel with equivalent protections) when sending requests to the token endpoints. </para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationServerDescription.AuthorizationEndpoint">
            <summary>
            Gets or sets the Authorization Server URL where the Client (re)directs the User
            to make an authorization request.
            </summary>
            <value>An HTTPS URL.</value>
            <remarks>
            <para>Clients direct the resource owner to the authorization endpoint to approve their access request. Before granting access, the resource owner first authenticates with the authorization server. The way in which the authorization server authenticates the end-user (e.g. username and password login, OpenID, session cookies) and in which the authorization server obtains the end-user's authorization, including whether it uses a secure channel such as TLS/SSL, is beyond the scope of this specification. However, the authorization server MUST first verify the identity of the end-user.</para>
            <para>The URI of the authorization endpoint can be found in the service documentation, or can be obtained by the client by making an unauthorized protected resource request (from the WWW-Authenticate response header auth-uri (The 'authorization-uri' Attribute) attribute).</para>
            <para>The authorization endpoint advertised by the resource server MAY include a query component as defined by [RFC3986] (Berners-Lee, T., Fielding, R., and L. Masinter, “Uniform Resource Identifier (URI): Generic Syntax,” January 2005.) section 3.</para>
            <para>Since requests to the authorization endpoint result in user authentication and the transmission of sensitive values, the authorization server SHOULD require the use of a transport-layer mechanism such as TLS/SSL (or a secure channel with equivalent protections) when sending requests to the authorization endpoints.</para>
            </remarks>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationServerDescription.ProtocolVersion">
            <summary>
            Gets or sets the OAuth version supported by the Authorization Server.
            </summary>
        </member>
        <member name="P:DotNetOpenAuth.OAuth2.AuthorizationServerDescription.Version">
            <summary>
            Gets the version of the OAuth protocol to use with this Authorization Server.
            </summary>
            <value>The version.</value>
        </member>
    </members>
</doc>
